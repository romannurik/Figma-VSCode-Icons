#!/usr/bin/env node
const fs = require('fs');
const path = require('path');

const html = fs.readFileSync(require.resolve('@vscode/codicons/dist/codicon.html'), 'utf8');
const { descRaw } = html.match(/let descriptions = (?<descRaw>\[(.+)\]);/ms)?.groups || {};
const descriptions = descRaw ? eval(descRaw) : undefined;
if (!descriptions) {
  throw new Error('Failed to parse descriptions from codicon.html');
}

const csv = fs.readFileSync(require.resolve('@vscode/codicons/dist/codicon.csv'), 'utf8');

const icons = [];

for (let row of csv.split(/\n/).slice(1)) { // remove header row
  const [shortName, character, unicode] = row.split(',');
  if (!shortName) continue;
  const description = descriptions.find(d => d.name === shortName)?.description || '';
  icons.push({ shortName, character, unicode, description });
}

fs.writeFileSync(path.resolve(__dirname, 'src/codicons.ts'), `

// This file is auto-generated by update-codicons.js

interface Codicon {
  shortName: string;
  character: string;
  unicode: string;
  description: string;
}

const allIcons: Codicon[] = ${JSON.stringify(icons, null, 2)};

export default allIcons;

`.trim());
